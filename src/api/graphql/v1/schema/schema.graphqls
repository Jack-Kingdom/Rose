schema {
    query: Query
    mutation: Mutation
}

type Query {

    articles(order:String = "-updatedAt",offset: Int = 0,limit:Int = 10, status:status=published):[Article]
    tags(order:String = "-updatedAt",offset: Int = 0,limit:Int = 10):[Tag]

    article(slug:String!):Article
    tag(slug:String!):Tag
}

type Mutation {

    createArticle(params:ArticleInput):ReturnType
    updateArticle(slug:String!,params:ArticleInput):ReturnType
    deleteArticle(slug:ID!):ReturnType

    createTag(params:TagInput):ReturnType
    updateTag(slug:String!,params:TagInput):ReturnType
    deleteTag(slug:ID!):ReturnType
}

interface Base{
    slug: String!
    title: String
}
    
type Article implements Base{
    slug:String!
    title:String
    content:String
    renderedContent:String
    tags: [Tag]
    status: status
    allowComments: Boolean
    createdAt: Int
    updatedAt: Int
}

input ArticleInput{
    slug:String!
    title:String
    content:String
    renderedContent:String
    tags: [String]      # use slug as reference
    status: status
    allowComments: Boolean
    createdAt: Int
    updatedAt: Int
}

type Tag implements Base{
    slug: String!
    title: String
    articles(order:String = "-updatedAt",offset: Int = 0,limit:Int = 10):[Article]
}

input TagInput {
    slug: String!
    title: String
}

enum status {
    published
    draft
    removed
}

type ReturnType {
    success:Boolean!
    message:String
}